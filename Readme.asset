Unity Animation State Controller
Overview
This Unity project demonstrates the implementation of an Animation State Controller using the Unity Animator component and C# scripting. It handles transitions between idle, walking, and running states based on player input, providing a smooth and responsive animation experience.

Features
Dynamic Animation Transitions:
Automatically transitions between idle, walking, and running states.
User Input Handling:
Responds to W and Left Shift key presses to trigger appropriate animations.
Animator Hashing:
Uses Animator.StringToHash() for optimized state management.
How It Works
Animation Setup:

The script interacts with an Animator component attached to the GameObject.
Animator parameters IsWalking and IsRunning control state transitions.
Player Input:

W Key: Triggers the walking animation.
W + Left Shift: Triggers the running animation.
Releasing keys transitions back to the idle state.
Code Highlights:

Hashing animation parameters with Animator.StringToHash() for better performance.
Logic for walking and running animations is handled in the Update() method.
Controls
W Key: Start walking.
W + Left Shift: Start running.
Release W: Return to idle state.
Learning Highlights
Understanding Unity's Animator component and state management.
Using C# scripting to handle player input and trigger animations dynamically.
Optimizing animation transitions with hashed parameters.
Setup Instructions
Attach the script AnimationStateController to a GameObject with an Animator component.
Create animation states (Idle, Walk, Run) and link them to the Animator parameters IsWalking and IsRunning.
Set up transitions between states with appropriate conditions in the Animator window.
Play the game and use the controls to observe smooth animation transitions.
Technologies Used
Unity
C#